<audio id="backgroundMusic" src="/musica-fondo.mp3" loop></audio>

<div 
  id="notificationCard" 
  class="fixed bottom-5 right-5 z-[1000] max-w-xs rounded-lg bg-white p-5 shadow-lg border-l-[5px] border-blue-500"
>
  <p class="mb-4 text-base text-gray-800">
    ¿Activar música de fondo para una mejor experiencia?
  </p>
  <div class="flex justify-end gap-3">
    <button id="acceptButton" class="rounded-md bg-blue-500 px-4 py-2 font-bold text-white transition hover:bg-blue-600">Sí</button>
    <button id="declineButton" class="rounded-md bg-gray-200 px-4 py-2 font-bold text-gray-800 transition hover:bg-gray-300">No</button>
  </div>
</div>

<button 
  id="musicToggleButton" 
  class="fixed bottom-5 right-5 z-[1000] hidden h-12 w-12 items-center justify-center rounded-full bg-gray-800 text-white shadow-lg transition hover:bg-gray-700"
>
  <svg id="speakerIcon" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z" />
  </svg>
  <svg id="muteIcon" xmlns="http://www.w3.org/2000/svg" class="hidden h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z" clip-rule="evenodd" />
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 14l-2-2m0 0l-2-2m2 2l2-2m-2 2l2 2" />
  </svg>
</button>

<script>
  // --- ELEMENTOS DEL DOM (sin cambios) ---
  const audio = document.getElementById('backgroundMusic') as HTMLAudioElement;
  const notificationCard = document.getElementById('notificationCard');
  const acceptBtn = document.getElementById('acceptButton');
  const declineBtn = document.getElementById('declineButton');
  const musicToggleButton = document.getElementById('musicToggleButton');
  const speakerIcon = document.getElementById('speakerIcon');
  const muteIcon = document.getElementById('muteIcon');

  // --- ESTADO GLOBAL (sin cambios) ---
  const originalVolume = 0.5;
  let isMusicEnabled = false;
  let isManuallyMuted = false;
  let fadeInterval;

  // --- FUNCIONES DE MÚSICA (CÓDIGO MEJORADO) ---

  const fadeOutMusic = () => {
    clearInterval(fadeInterval);
    if (audio.paused || audio.volume === 0) return;

    fadeInterval = setInterval(() => {
      // Reduce el volumen en pasos más pequeños para suavizar
      if (audio.volume > 0.05) {
        audio.volume = parseFloat((audio.volume - 0.05).toFixed(2));
      } else {
        // Al final, lo silencia, pausa y limpia el intervalo
        audio.volume = 0;
        audio.pause();
        clearInterval(fadeInterval);
      }
    }, 70); // Un intervalo de 70ms para una transición más lenta
  };

  const fadeInMusic = () => {
    clearInterval(fadeInterval);
    // No hacer nada si está muteado manualmente o si ya está sonando a buen volumen
    if (isManuallyMuted || (!audio.paused && audio.volume > 0)) return;

    audio.volume = 0;
    audio.play().catch(e => console.error("Error al reproducir:", e));
    
    fadeInterval = setInterval(() => {
      // Aumenta el volumen en los mismos pasos pequeños
      if (audio.volume < originalVolume - 0.05) {
        audio.volume = parseFloat((audio.volume + 0.05).toFixed(2));
      } else {
        // Al llegar al tope, fija el volumen y limpia el intervalo
        audio.volume = originalVolume;
        clearInterval(fadeInterval);
      }
    }, 70);
  };

  // --- LÓGICA DE VIDEOS (sin cambios) ---

  const handleVideoStateChange = () => {
    if (!isMusicEnabled) return;

    const videos = document.querySelectorAll('video');
    let isAnyVideoPlayingWithSound = false;
    videos.forEach(video => {
      if (!video.paused && !video.muted && video.volume > 0) {
        isAnyVideoPlayingWithSound = true;
      }
    });

    if (isAnyVideoPlayingWithSound) {
      fadeOutMusic();
    } else {
      fadeInMusic();
    }
  };

  // --- EVENT LISTENERS (sin cambios) ---

  acceptBtn?.addEventListener('click', () => {
    isMusicEnabled = true;
    isManuallyMuted = false;
    notificationCard?.classList.add('hidden');
    musicToggleButton?.classList.remove('hidden');
    musicToggleButton?.classList.add('flex');
    speakerIcon?.classList.remove('hidden');
    muteIcon?.classList.add('hidden');
    fadeInMusic();
  });

  declineBtn?.addEventListener('click', () => {
    notificationCard?.classList.add('hidden');
  });

  musicToggleButton?.addEventListener('click', () => {
    isManuallyMuted = !isManuallyMuted;
    if (isManuallyMuted) {
      fadeOutMusic();
      speakerIcon?.classList.add('hidden');
      muteIcon?.classList.remove('hidden');
    } else {
      handleVideoStateChange();
      speakerIcon?.classList.remove('hidden');
      muteIcon?.classList.add('hidden');
    }
  });

  document.addEventListener('DOMContentLoaded', () => {
    const videos = document.querySelectorAll('video');
    videos.forEach(video => {
      video.addEventListener('play', handleVideoStateChange);
      video.addEventListener('pause', handleVideoStateChange);
      video.addEventListener('volumechange', handleVideoStateChange);
    });
  });
</script>